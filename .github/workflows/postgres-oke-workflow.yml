name: PostgreSQL OCI Deployment

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
  OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
  OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
  OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
  OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
  OCI_COMPARTMENT_ID: ${{ secrets.OCI_COMPARTMENT_ID }}
  BASTION_HOST_IP: ${{ secrets.BASTION_HOST_IP }}
  BASTION_SSH_PRIVATE_KEY: ${{ secrets.BASTION_SSH_PRIVATE_KEY }}
  BASTION_USER: ${{ secrets.BASTION_USER }}
  KUBECONFIG_DATA: ${{ secrets.KUBECONFIG_DATA }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_USER: postgres
  POSTGRES_DB: postgres
  IMAGE_NAME: optimized-postgres
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build_and_push:
    name: Build, Optimize and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Create PostgreSQL Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM postgres:15-alpine
          ENV POSTGRES_PASSWORD=$POSTGRES_PASSWORD
          ENV POSTGRES_USER=$POSTGRES_USER
          ENV POSTGRES_DB=$POSTGRES_DB
          COPY postgresql.conf /etc/postgresql/postgresql.conf
          COPY init-scripts/ /docker-entrypoint-initdb.d/
          EXPOSE 5432
          CMD ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
          EOF

          mkdir -p init-scripts
          cat > init-scripts/init-db.sh << 'EOF'
          #!/bin/bash
          set -e
          psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
              CREATE TABLE IF NOT EXISTS example_table (
                  id SERIAL PRIMARY KEY,
                  name VARCHAR(100),
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
              );
              INSERT INTO example_table (name) VALUES ('Example Data');
          EOSQL
          EOF

          cat > postgresql.conf << 'EOF'
          listen_addresses = '*'
          max_connections = 100
          shared_buffers = 128MB
          dynamic_shared_memory_type = posix
          log_timezone = 'UTC'
          datestyle = 'iso, mdy'
          timezone = 'UTC'
          lc_messages = 'en_US.utf8'
          lc_monetary = 'en_US.utf8'
          lc_numeric = 'en_US.utf8'
          lc_time = 'en_US.utf8'
          default_text_search_config = 'pg_catalog.english'
          EOF

          chmod +x init-scripts/init-db.sh

      - name: Build and optimize Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            POSTGRES_USER=${{ env.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ env.POSTGRES_DB }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Push image to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache

  deploy_to_oke:
    name: Deploy PostgreSQL to OKE
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install OCI CLI
        run: |
          python -m pip install --upgrade pip
          pip install oci-cli
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          oci --version

      - name: Configure OCI CLI
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/config << EOF
          [DEFAULT]
          user=${{ env.OCI_CLI_USER }}
          tenancy=${{ env.OCI_CLI_TENANCY }}
          fingerprint=${{ env.OCI_CLI_FINGERPRINT }}
          region=${{ env.OCI_CLI_REGION }}
          key_file=~/.oci/oci_api_key.pem
          EOF
          echo "${{ env.OCI_CLI_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem
          oci iam region list

      - name: Create Bastion Session
        run: |
          SESSION_ID=$(oci bastion session create-port-forwarding \
            --bastion-id ${{ secrets.BASTION_OCID }} \
            --target-resource-id ${{ secrets.TARGET_INSTANCE_OCID }} \
            --target-port 22 \
            --session-ttl 3600 \
            --wait-for-state SUCCEEDED \
            --display-name "GHA-Session-$GITHUB_RUN_ID" \
            --query "data.\"session-id\"" \
            --raw-output)
          
          echo "SESSION_ID=$SESSION_ID" >> $GITHUB_ENV
          echo "Session created with ID: $SESSION_ID"
          oci bastion session get --session-id $SESSION_ID

      - name: Setup kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ env.KUBECONFIG_DATA }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          kubectl version --client

      - name: Deploy PostgreSQL to OKE
        run: |
          # Create Kubernetes manifests
          cat > postgres-deployment.yaml << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: postgres
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: postgres
            template:
              metadata:
                labels:
                  app: postgres
              spec:
                containers:
                - name: postgres
                  image: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
                  ports:
                  - containerPort: 5432
                  env:
                  - name: POSTGRES_PASSWORD
                    value: "${{ env.POSTGRES_PASSWORD }}"
                  - name: POSTGRES_USER
                    value: "${{ env.POSTGRES_USER }}"
                  - name: POSTGRES_DB
                    value: "${{ env.POSTGRES_DB }}"
                  volumeMounts:
                  - mountPath: /var/lib/postgresql/data
                    name: postgres-data
                volumes:
                - name: postgres-data
                  persistentVolumeClaim:
                    claimName: postgres-pvc
          EOF

          cat > postgres-service.yaml << EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: postgres
          spec:
            selector:
              app: postgres
            ports:
              - protocol: TCP
                port: 5432
                targetPort: 5432
            type: LoadBalancer
          EOF

          # Apply manifests
          kubectl apply -f postgres-deployment.yaml
          kubectl apply -f postgres-service.yaml

          # Verify deployment
          kubectl rollout status deployment/postgres
          kubectl get services postgres
